const fs = require('fs');
const path = require('path');
const { extendConfig } = require('hardhat/config');

const { HardhatPluginError } = require('hardhat/plugins');

const {
  TASK_COMPILE,
} = require('hardhat/builtin-tasks/task-names');

extendConfig(function (config, userConfig) {
  config.dependencyCompiler = Object.assign(
    {
      paths: [],
      keep: false,
    },
    userConfig.dependencyCompiler
  );
});

const generate = function (dependency) {
  return `
  // SPDX-License-Identifier: UNLICENSED
  pragma solidity *;
  import '${ dependency }';
  `;
};

task(TASK_COMPILE, async function (args, hre, runSuper) {
  const config = hre.config.dependencyCompiler;
  const { name } = require('./package.json');

  const directory = path.resolve(hre.config.paths.sources, name);
  const tracker = path.resolve(directory, `.${ name }`);

  if (fs.existsSync(directory)) {
    if (fs.existsSync(tracker)) {
      fs.rmdirSync(directory, { recursive: true });
    } else {
      throw new HardhatPluginError(`temporary source directory must have been generated by ${ name }`);
    }
  }

  fs.mkdirSync(directory);
  fs.writeFileSync(tracker, `directory approved for write access by ${ name }\n`);

  for (let dependency of config.paths) {
    const fullPath = path.join(directory, dependency);

    if (!fs.existsSync(path.dirname(fullPath))) {
      fs.mkdirSync(path.dirname(fullPath), { recursive: true });
    }

    fs.writeFileSync(fullPath, generate(dependency));
  }

  try {
    await runSuper();
  } finally {
    if (!config.keep) {
      fs.rmdirSync(directory, { recursive: true });
    }
  }
});
